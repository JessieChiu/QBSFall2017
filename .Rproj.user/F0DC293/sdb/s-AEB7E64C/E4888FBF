{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Data Mining\"\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Load Packages\n\nLoad all required packages.\n\n```{r library, include=FALSE}\nrequire(\"xml2\")\nlibrary('rvest')\nlibrary('NLP')\nlibrary('tm')\nlibrary('stringr')\nlibrary('dplyr')\nlibrary(\"DT\")\n```\n\n## Import Data\n\nImport the datasets of *Taipei's Top 15 Movies From 2008-2015 (by quarter)* and combine.\n\n```{r import}\n# read files\nQ1 = read.csv(file.path(\"datasets\", \"QBS-Q1-data-new.csv\"))\nQ2 = read.csv(file.path(\"datasets\", \"QBS-Q2-data-new.csv\"))\nQ3 = read.csv(file.path(\"datasets\", \"QBS-Q3-data-new.csv\"))\nQ4 = read.csv(file.path(\"datasets\", \"QBS-Q4-data-new.csv\"))\nY = read.csv(file.path(\"datasets\", \"Crime-Rate.csv\"))\n\n# combine datasets\ndata = rbind(Q1,Q2,Q3,Q4)\n\nDT:::datatable(\n    data,\n    extensions = list(\"Scroller\" = NULL,\n                      'FixedHeader' = NULL,\n                      \"FixedColumns\" = list(leftColumns=4)),\n    options = list(\n                deferRender = TRUE,\n                scrollY = 200,\n                scroller = TRUE,\n                autoWidth=TRUE,\n                pageLength = 50,\n                fixedHeader = TRUE,\n                dom = 't',\n                scrollX = TRUE,\n                fixedColumns = list(leftColumns = 4)\n                  )\n              )\n```\n\n.\n\n## Preprocess Data\n\nStep 1 : Convert variables **box_office**, **rotten_tomatoes**, and **Imbd** to their correct numeric values. \n\nStep 2 : Compute the log of **box_office** for better comparison.\n\nStep 3 : Since many Rotten Tomatoes scores are missing, we decided to overwrite them with their corresponding Imbd scores. We then compute and assign the mean scores to variable **score**. \n\nStep 4 : Standardize scores for better comparison.\n\n```{r pre}\n# convert factor to numeric\ndata$box_office = as.numeric(data$box_office)\ndata$rotten_tomatoes = as.numeric(data$rotten_tomatoes)\ndata$Imbd = as.numeric(data$Imbd)\n\n# convert box office to log for better comparison\ndata$log_box_office = log(data$box_office)\n\n# compute mean score and overwrite NA values\nA = (data$rotten_tomatoes + data$Imbd)/2\nB = data$Imbd\ndata$score = ifelse(!is.na(data$rotten_tomatoes), A, B)\n\n# extract data with complete log box office and score values\ndata = data[complete.cases(data[ , 8:9]), ]\n\n# standardize score\ndata$score.s = (data$score - mean(data$score))/sd(data$score)\n\nDT:::datatable(\n    data,\n    extensions = list(\"Scroller\" = NULL,\n                      'FixedHeader' = NULL,\n                      \"FixedColumns\" = list(leftColumns=4)),\n    options = list(\n                deferRender = TRUE,\n                scrollY = 200,\n                scroller = TRUE,\n                autoWidth=TRUE,\n                pageLength = 50,\n                fixedHeader = TRUE,\n                dom = 't',\n                scrollX = TRUE,\n                fixedColumns = list(leftColumns = 4)\n                  )\n              )\n```\n\n.\n\nSince the variable **category** consists of jumbles of genres, we must apply text mining techniques to derive information.\nThe process of transforming and cleaning text data is shown below.\n\n```{r tm}\ncategory <- data$category\ncorpus <- Corpus(VectorSource(category))\n\n## Data-Preprocessing: removing punctuation\ncorpus2 <- tm_map(corpus, removePunctuation)\n## Data-Preprocessing: changing all to lower case\ncorpus2 <- tm_map(corpus2, tolower)\n## Data-Preprocessing: removing whitespaces\ncorpus2 <- tm_map(corpus2, stripWhitespace)\ncorpus2 = sapply(corpus2, as.character)\n\ndata$category =as.factor(corpus2)\n\nDT:::datatable(\n    data,\n    extensions = list(\"Scroller\" = NULL,\n                      'FixedHeader' = NULL,\n                      \"FixedColumns\" = list(leftColumns=4)),\n    options = list(\n                deferRender = TRUE,\n                scrollY = 200,\n                scroller = TRUE,\n                autoWidth=TRUE,\n                pageLength = 50,\n                fixedHeader = TRUE,\n                dom = 't',\n                scrollX = TRUE,\n                fixedColumns = list(leftColumns = 4)\n                  )\n              )\n```\n\n.\n\n## Define Variables\n\nAccording to their genres, movies are categorized into three types: crime-inducing, crime-reducing, and neutral.\n\nTheir corresponding genres are as follows:\n\n1. Crime-inducing: \"crime\",\"thriller\",\"horror\",\"mystery\",\"suspense\". These are the genres that we assume will induce negative emotions, likely leading to an increase in crime rates.\n\n2. Crime-reducing: \"family\",\"kids\",\"comedy\",\"animation\". These are the genres that we assume will evoke positive emotions, which may cause a decrease in crime rates.\n\n3. Neutral: these are the genres that fall in neither category.\n\n```{r var}\n# determine x1=number of crime-inducing movies\nx1 = c(\"crime\",\"thriller\",\"horror\",\"mystery\",\"suspense\")\nx1 = paste(x1, collapse='|')\nx1_row = which(apply(data.frame(data$category), 1, function(i) str_detect(paste(i, collapse=','), x1)))\nfor(i in 1:481){\n  if (i %in% x1_row){\n    data[i,\"x1\"] = 1\n  } else{\n   data[i,\"x1\"] = 0\n  }\n}\n\n# determine x2=number of crime-reducing movies\nx2 = c(\"family\",\"kids\",\"comedy\",\"animation\")\nx2 = paste(x2, collapse='|')\nx2_row = which(apply(data.frame(data$category), 1, function(i) str_detect(paste(i, collapse=','), x2)))\nfor(i in 1:481){\n  if (i %in% x2_row){\n    data[i,\"x2\"] = 1\n  } else{\n    data[i,\"x2\"] = 0\n  }\n}\n\n# determine x3=number of neutral movies\ndata$x3 = ifelse(data$x1 +data$x2 == 0, 1, 0)\n\nDT:::datatable(\n    data,\n    extensions = list(\"Scroller\" = NULL,\n                      'FixedHeader' = NULL,\n                      \"FixedColumns\" = list(leftColumns=4)),\n    options = list(\n                deferRender = TRUE,\n                scrollY = 200,\n                scroller = TRUE,\n                autoWidth=TRUE,\n                pageLength = 50,\n                fixedHeader = TRUE,\n                dom = 't',\n                scrollX = TRUE,\n                fixedColumns = list(leftColumns = 4)\n                  )\n              )\n```\n\n.\n\n## Assign to Datasets\n\nFor our first model, we will examine **the effect of movie type** on **crime rates**. **The effect of movie type** is the average log box office value for each type.\n\n```{r model1, eval=FALSE}\n# Model 1:\nextract.data = data %>%\n  group_by(year, Quarter) %>%\n  summarise(Bx1=mean(log_box_office*x1), Bx2=mean(log_box_office*x2), Bx3=mean(log_box_office*x3)) %>%\n  select(year, Quarter, Bx1, Bx2, Bx3)\n\nextract.data = merge(Y, extract.data, by=c(\"year\",\"Quarter\"))\n\nwrite.csv(extract.data, \"M1.data.new.csv\")\n```\n\nFor our second model, we will examine **the effect of box office results** and **the effect of movie scores** on **crime rates**.\n\n```{r model2, eval=FALSE}\n# Model 2:\nextract.data = data %>%\n  group_by(year, Quarter) %>%\n  summarise(log_box_office=mean(log_box_office), score.s = mean(score.s), Bscore.s=mean(log_box_office*score.s)) %>%\n  select(year, Quarter, log_box_office, score.s, Bscore.s) \n\nextract.data = merge(Y, extract.data, by=c(\"year\",\"Quarter\"))\n\nwrite.csv(extract.data, \"M2.data.new.csv\")\n```\n",
    "created" : 1513065671901.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2562160560",
    "id" : "E4888FBF",
    "lastKnownWriteTime" : 1513388012,
    "last_content_update" : 1513388012694,
    "path" : "C:/Users/jestw/Desktop/QBS/QBS Group 2_final/Website/data.Rmd",
    "project_path" : "data.Rmd",
    "properties" : {
        "last_setup_crc32" : "AF4A5568bb338d19",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}